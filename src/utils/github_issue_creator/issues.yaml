issues:
  - title: "Implement Environment Variables for API Keys and Sensitive Data"
    description: "Sensitive data like API keys should be stored in environment variables instead of hardcoding them."
    labels:
      - "enhancement"
    milestone: "v1.0"
    prefix: "[IMPROVEMENT]"

  - title: "Fix login error"
    description: "An error occurs when trying to log in. It needs immediate attention."
    labels:
      - "bug"
      - "critical"
    milestone: "v1.1"
    prefix: "[BUG]"

  - title: "Improve Error Handling and Logging"
    description: |
      Expand error handling to cover all potential failure points, including API requests, database operations, and CLI errors. Ensure that meaningful error messages are logged.
      - Improve the log format and include timestamps for better tracking.
      - Log all API request failures with appropriate retry mechanisms.
    labels:
      - "logging"
      - "error-handling"
      - "enhancement"
    milestone: "Stability Improvement"
    prefix: "[IMPROVEMENT]"

  - title: "Expand Unit and Integration Test Coverage"
    description: |
      Review and expand the current test coverage. Specifically:
      - Ensure tests cover the functionality of `stock_data_fetcher.py` and `stock_news_data_fetcher.py`.
      - Add integration tests for database interactions and API data collection.
      - Use mocking for external API calls to ensure tests are fast and independent of external services.
    labels:
      - "testing"
      - "backend"
    milestone: "Testing Improvement"
    prefix: "[IMPROVEMENT]"

  - title: "Add CLI Command for Database Management"
    description: |
      Add CLI commands for database management, such as:
      - Resetting the database.
      - Running database migrations.
      - Viewing the database schema.
    labels:
      - "feature"
      - "cli"
      - "database"
    milestone: "Database Management Features"
    prefix: "[FEATURE]"

  - title: "Set Up Continuous Integration (CI)"
    description: |
      Set up GitHub Actions or another CI tool to automate testing, linting, and building. Ensure that:
      - Tests run on each pull request and commit to the main branch.
      - The project builds without errors and runs in the containerized environment.
      - Linting checks are enforced to ensure code quality.
    labels:
      - "ci/cd"
      - "automation"
    milestone: "CI/CD Setup"
    prefix: "[IMPROVEMENT]"

  - title: "Refactor stock_data_fetcher.py for Reusability"
    description: |
      Refactor `stock_data_fetcher.py` to make it more reusable:
      - Abstract API fetching logic into a service layer.
      - Allow multiple APIs for redundancy in case one fails.
      - Add functionality to handle additional financial data.
    labels:
      - "refactoring"
      - "backend"
      - "enhancement"
    milestone: "Code Refactoring"
    prefix: "[IMPROVEMENT]"

  - title: "Add Sentiment Analysis on Financial News"
    description: |
      Expand the `stock_news_data_fetcher.py` to perform sentiment analysis on fetched financial news articles. Use a sentiment analysis library or API.
      - Store sentiment scores in the database for future analysis.
      - Integrate the sentiment data into the CLI.
    labels:
      - "feature"
      - "sentiment-analysis"
      - "backend"
    milestone: "Sentiment Analysis"
    prefix: "[FEATURE]"

  - title: "Improve Database Schema and Migrations"
    description: |
      Review the current database schema and ensure it's optimized for performance and scalability. Add support for migrations with Alembic and include:
      - Migrations for existing and new database fields.
      - Versioning of the database.
    labels:
      - "database"
      - "migrations"
      - "enhancement"
    milestone: "Database Optimization"
    prefix: "[FEATURE]"

  - title: "Implement Asynchronous Data Fetching"
    description: |
      Improve the efficiency of data collection by implementing asynchronous API calls using `asyncio` or `aiohttp`. This will allow multiple API requests to be handled concurrently, speeding up data collection.
    labels:
      - "performance"
      - "backend"
      - "enhancement"
    milestone: "Performance Improvement"
    prefix: "[IMPROVEMENT]"

  - title: "Automate Regular Data Fetching and Reporting"
    description: |
      Implement a scheduler (such as `cron` or `APScheduler`) to automatically fetch stock data and news at regular intervals. Also, generate reports summarizing:
      - Stock price changes.
      - Sentiment trends from news.
      - Key financial metrics.
    labels:
      - "automation"
      - "reporting"
      - "backend"
    milestone: "Reporting Automation"
    prefix: "[FEATURE]"

  - title: "Optimize Docker Setup for Production and Development"
    description: |
      Optimize the Dockerfile and dev container setup:
      - Ensure the development container includes necessary tools like linters, debuggers, and testing frameworks.
      - Separate development and production Dockerfiles to reduce container size for production deployments.
    labels:
      - "docker"
      - "containerization"
      - "enhancement"
    milestone: "Container Optimization"
    prefix: "[IMPROVEMENT]"

  - title: "Implement API Rate Limiting and Caching"
    description: |
      Implement API rate limiting and caching mechanisms to avoid hitting API limits when fetching stock and news data. Use in-memory caching or tools like Redis to store temporary results.
    labels:
      - "api"
      - "performance"
      - "backend"
    milestone: "API Optimization"
    prefix: "[IMPROVEMENT]"

  - title: "Refactor Project to Use Clean Architecture"
    description: |
      Refactor the project to adopt Clean Architecture, separating the application logic, domain models, infrastructure, and interface layers. The goal is to ensure better separation of concerns, easier testing, and maintainability.
    labels:
      - "architecture"
      - "refactoring"
    milestone: "Architecture Refactor"
    prefix: "[IMPROVEMENT]"

  - title: "Implement Dependency Injection"
    description: |
      Implement dependency injection in the project to improve decoupling between services, repositories, and CLI logic. This will make the project more modular and easier to test.
    labels:
      - "architecture"
      - "backend"
      - "enhancement"
    milestone: "Architecture Improvement"
    prefix: "[FEATURE]"

  - title: "Implement Service Layer for Stock and News Data"
    description: |
      Create a dedicated service layer to manage stock and news data operations. This will encapsulate API interactions and business logic for fetching, analyzing, and storing data.
    labels:
      - "feature"
      - "backend"
      - "service"
    milestone: "Service Layer Implementation"
    prefix: "[FEATURE]"

  - title: "Implement Command Pattern for CLI"
    description: |
      Refactor the CLI to use the Command Design Pattern. This will make the CLI more extensible, allowing for easier addition of new commands (e.g., stock, news, db).
    labels:
      - "cli"
      - "architecture"
      - "enhancement"
    milestone: "CLI Refactor"
    prefix: "[FEATURE]"

  - title: "Implement Asynchronous API Calls"
    description: |
      Improve the performance of API calls by using asynchronous calls with `asyncio` and `aiohttp`. This will speed up fetching data from multiple stock APIs in parallel.
    labels:
      - "performance"
      - "async"
      - "backend"
    milestone: "Performance Improvement"
    prefix: "[IMPROVEMENT]"

  - title: "Implement Caching Layer for API Calls"
    description: |
      Implement a caching layer using Redis or in-memory caching to store recent stock and news data, reducing the load on external APIs.
    labels:
      - "performance"
      - "api"
      - "backend"
    milestone: "Caching Implementation"
    prefix: "[FEATURE]"

  - title: "Improve Error Handling and Logging"
    description: |
      Improve the current error handling and logging strategy to ensure that errors are consistently caught and logged for easier debugging and monitoring.
    labels:
      - "logging"
      - "error-handling"
      - "backend"
    milestone: "Stability Improvement"
    prefix: "[IMPROVEMENT]"

  - title: "Add Database Management CLI Commands"
    description: |
      Expand the CLI to include commands for managing the database. This will include commands to reset the database, apply migrations, and display schema details.
    labels:
      - "cli"
      - "database"
      - "enhancement"
    milestone: "Database Management"
    prefix: "[FEATURE]"

  - title: "Use Repository Pattern for Data Access"
    description: |
      Refactor the project to fully adopt the Repository Pattern for accessing data, both from APIs and the database. This will make it easier to swap out data sources in the future.
    labels:
      - "refactoring"
      - "backend"
      - "architecture"
    milestone: "Code Refactoring"
    prefix: "[IMPROVEMENT]"

  - title: "Automate Stock and News Data Fetching with Scheduler"
    description: |
      Implement a scheduling system to automatically fetch stock and news data at regular intervals, using a tool like APScheduler or a simple cron job.
    labels:
      - "automation"
      - "feature"
      - "backend"
    milestone: "Automation Features"
    prefix: "[FEATURE]"

  - title: "Optimize Docker Setup for Development and Production"
    description: |
      Improve the Docker setup to separate development and production environments. This will reduce the image size for production and include useful tools (like linters) for development.
    labels:
      - "docker"
      - "containerization"
      - "backend"
    milestone: "Containerization Improvement"
    prefix: "[IMPROVEMENT]"

  - title: "Add Database Migrations with Alembic"
    description: |
      Integrate Alembic migrations into the project for managing changes to the database schema. This will ensure consistency when upgrading the database schema across different environments.
    labels:
      - "database"
      - "migrations"
      - "enhancement"
    milestone: "Database Management"
    prefix: "[FEATURE]"
