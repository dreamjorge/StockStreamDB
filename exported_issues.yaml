issues:
- description: 'We need to create unit tests for the GitHub issue creation script
    to ensure its reliability and correctness.


    The tests should cover:

    - Label creation and updates

    - Milestone creation and updates

    - Issue creation and updates

    - Rate limit checks

    - Error handling for label and milestone creation failures

    - Validation of environment variables (like GitHub tokens)


    **Acceptance Criteria**:

    - Unit tests should be written using pytest.

    - Mock external API calls to GitHub to avoid real network requests.

    - Ensure high code coverage, aiming for at least 80%.

    '
  labels:
  - enhancement
  - Backend
  - testing
  milestone: Unit Testing
  milestone_description: null
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[TEST] Create Unit Tests for GitHub Issue Creator Script'
- description: ''
  labels: []
  milestone: null
  milestone_description: ''
  milestone_due_on: null
  prefix: ''
  title: Feature/issue generator
- description: 'Integrate Alembic migrations into the project for managing changes
    to the database schema. This will ensure consistency when upgrading the database
    schema across different environments.

    '
  labels:
  - enhancement
  - migrations
  milestone: Database Management
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[FEATURE] Add Database Migrations with Alembic'
- description: 'Improve the Docker setup to separate development and production environments.
    This will reduce the image size for production and include useful tools (like
    linters) for development.

    '
  labels: []
  milestone: Containerization Improvement
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: ''
  title: '[IMPROVEMENT] Optimize Docker Setup for Development and Production'
- description: 'Implement a scheduling system to automatically fetch stock and news
    data at regular intervals, using a tool like APScheduler or a simple cron job.

    '
  labels: []
  milestone: Automation Features
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: ''
  title: '[FEATURE] Automate Stock and News Data Fetching with Scheduler'
- description: 'Refactor the project to fully adopt the Repository Pattern for accessing
    data, both from APIs and the database. This will make it easier to swap out data
    sources in the future.

    '
  labels:
  - refactoring
  - architecture
  milestone: Code Refactoring
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[refactoring]'
  title: '[IMPROVEMENT] Use Repository Pattern for Data Access'
- description: 'Expand the CLI to include commands for managing the database. This
    will include commands to reset the database, apply migrations, and display schema
    details.

    '
  labels:
  - enhancement
  milestone: Database Management
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[FEATURE] Add Database Management CLI Commands'
- description: 'Implement a caching layer using Redis or in-memory caching to store
    recent stock and news data, reducing the load on external APIs.

    '
  labels:
  - api
  milestone: Caching Implementation
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[api]'
  title: '[FEATURE] Implement Caching Layer for API Calls'
- description: 'Improve the performance of API calls by using asynchronous calls with
    `asyncio` and `aiohttp`. This will speed up fetching data from multiple stock
    APIs in parallel.

    '
  labels: []
  milestone: Performance Improvement
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: ''
  title: '[IMPROVEMENT] Implement Asynchronous API Calls'
- description: 'Refactor the CLI to use the Command Design Pattern. This will make
    the CLI more extensible, allowing for easier addition of new commands (e.g., stock,
    news, db).

    '
  labels:
  - enhancement
  - architecture
  milestone: CLI Refactor
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[FEATURE] Implement Command Pattern for CLI'
- description: 'Create a dedicated service layer to manage stock and news data operations.
    This will encapsulate API interactions and business logic for fetching, analyzing,
    and storing data.

    '
  labels:
  - service
  milestone: Service Layer Implementation
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[service]'
  title: '[FEATURE] Implement Service Layer for Stock and News Data'
- description: 'Implement dependency injection in the project to improve decoupling
    between services, repositories, and CLI logic. This will make the project more
    modular and easier to test.

    '
  labels:
  - enhancement
  - architecture
  milestone: Architecture Improvement
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[FEATURE] Implement Dependency Injection'
- description: 'Refactor the project to adopt Clean Architecture, separating the application
    logic, domain models, infrastructure, and interface layers. The goal is to ensure
    better separation of concerns, easier testing, and maintainability.

    '
  labels:
  - refactoring
  - architecture
  milestone: Architecture Refactor
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[refactoring]'
  title: '[IMPROVEMENT] Refactor Project to Use Clean Architecture'
- description: 'Implement API rate limiting and caching mechanisms to avoid hitting
    API limits when fetching stock and news data. Use in-memory caching or tools like
    Redis to store temporary results.

    '
  labels:
  - api
  milestone: API Optimization
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[api]'
  title: '[IMPROVEMENT] Implement API Rate Limiting and Caching'
- description: 'Optimize the Dockerfile and dev container setup:

    - Ensure the development container includes necessary tools like linters, debuggers,
    and testing frameworks.

    - Separate development and production Dockerfiles to reduce container size for
    production deployments.

    '
  labels:
  - enhancement
  milestone: Container Optimization
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[IMPROVEMENT] Optimize Docker Setup for Production and Development'
- description: 'Improve the efficiency of data collection by implementing asynchronous
    API calls using `asyncio` or `aiohttp`. This will allow multiple API requests
    to be handled concurrently, speeding up data collection.

    '
  labels:
  - enhancement
  milestone: Performance Improvement
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[IMPROVEMENT] Implement Asynchronous Data Fetching'
- description: 'Review the current database schema and ensure it''s optimized for
    performance and scalability. Add support for migrations with Alembic and include:

    - Migrations for existing and new database fields.

    - Versioning of the database.

    '
  labels:
  - enhancement
  - migrations
  milestone: Database Optimization
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[FEATURE] Improve Database Schema and Migrations'
- description: 'Refactor `stock_data_fetcher.py` to make it more reusable:

    - Abstract API fetching logic into a service layer.

    - Allow multiple APIs for redundancy in case one fails.

    - Add functionality to handle additional financial data.

    '
  labels:
  - enhancement
  - refactoring
  milestone: Code Refactoring
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[IMPROVEMENT] Refactor stock_data_fetcher.py for Reusability'
- description: 'Add CLI commands for database management, such as:

    - Resetting the database.

    - Running database migrations.

    - Viewing the database schema.

    '
  labels: []
  milestone: Database Management Features
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: ''
  title: '[FEATURE] Add CLI Command for Database Management'
- description: 'Review and expand the current test coverage. Specifically:

    - Ensure tests cover the functionality of `stock_data_fetcher.py` and `stock_news_data_fetcher.py`.

    - Add integration tests for database interactions and API data collection.

    - Use mocking for external API calls to ensure tests are fast and independent
    of external services.

    '
  labels:
  - testing
  milestone: Testing Improvement
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[testing]'
  title: '[IMPROVEMENT] Expand Unit and Integration Test Coverage'
- description: An error occurs when trying to log in. It needs immediate attention.
  labels:
  - bug
  - critical
  milestone: v1.1
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[bug]'
  title: '[BUG] Fix login error'
- description: 'Improve the current error handling and logging strategy to ensure
    that errors are consistently caught and logged for easier debugging and monitoring.

    '
  labels:
  - logging
  - error-handling
  milestone: Stability Improvement
  milestone_description: null
  milestone_due_on: null
  prefix: '[logging]'
  title: '[IMPROVEMENT] Improve Error Handling and Logging'
- description: 'Implement a scheduler (such as `cron` or `APScheduler`) to automatically
    fetch stock data and news at regular intervals. Also, generate reports summarizing:

    - Stock price changes.

    - Sentiment trends from news.

    - Key financial metrics.

    '
  labels: []
  milestone: Reporting Automation
  milestone_description: null
  milestone_due_on: null
  prefix: ''
  title: '[FEATURE] Automate Regular Data Fetching and Reporting'
- description: 'Expand the `stock_news_data_fetcher.py` to perform sentiment analysis
    on fetched financial news articles. Use a sentiment analysis library or API.

    - Store sentiment scores in the database for future analysis.

    - Integrate the sentiment data into the CLI.

    '
  labels:
  - sentiment-analysis
  milestone: Sentiment Analysis
  milestone_description: null
  milestone_due_on: null
  prefix: '[sentiment-analysis]'
  title: '[FEATURE] Add Sentiment Analysis on Financial News'
- description: 'Set up GitHub Actions or another CI tool to automate testing, linting,
    and building. Ensure that:

    - Tests run on each pull request and commit to the main branch.

    - The project builds without errors and runs in the containerized environment.

    - Linting checks are enforced to ensure code quality.

    '
  labels: []
  milestone: CI/CD Setup
  milestone_description: null
  milestone_due_on: null
  prefix: ''
  title: '[IMPROVEMENT] Set Up Continuous Integration (CI)'
- description: 'Expand error handling to cover all potential failure points, including
    API requests, database operations, and CLI errors. Ensure that meaningful error
    messages are logged.

    - Improve the log format and include timestamps for better tracking.

    - Log all API request failures with appropriate retry mechanisms.

    '
  labels:
  - logging
  - error-handling
  milestone: Stability Improvement
  milestone_description: null
  milestone_due_on: null
  prefix: '[logging]'
  title: '[IMPROVEMENT] Improve Error Handling and Logging'
- description: 'Description: Currently, sensitive data like API keys (for fetching
    stock data, news, etc.) may not be properly secured. Refactor the project to use
    environment variables for sensitive data and document the setup in .env.example.'
  labels:
  - enhancement
  milestone: v1.0
  milestone_description: Milestone created via script
  milestone_due_on: null
  prefix: '[enhancement]'
  title: '[IMPROVEMENT] Implement Environment Variables for API Keys and Sensitive
    Data'
- description: 'Description: Expand the README.md to provide detailed usage instructions,
    contribution guidelines, and setup steps. Include:


    Instructions for setting up the project locally.


    Clear descriptions of the CLI commands and their usage.


    How to use the Docker setup and dev container.

    '
  labels:
  - documentation
  - enhancement
  - Containerization
  milestone: null
  milestone_description: ''
  milestone_due_on: null
  prefix: '[documentation]'
  title: '[IMPROVEMENT] Enhance Documentation and README.md'
- description: ''
  labels: []
  milestone: null
  milestone_description: ''
  milestone_due_on: null
  prefix: ''
  title: 'doc: Update on readme file'
- description: "- Update the README.md to include an introduction to the project,\
    \ its features, and usage.\r\n\r\n- Include a section acknowledging that parts\
    \ of the development process, including problem-solving, were supported by AI\
    \ tools like ChatGPT."
  labels:
  - documentation
  milestone: null
  milestone_description: ''
  milestone_due_on: null
  prefix: '[documentation]'
  title: '[IMPROVEMENT] Update README.md with Project Overview and AI Acknowledgment'
- description: ''
  labels: []
  milestone: null
  milestone_description: ''
  milestone_due_on: null
  prefix: ''
  title: Feature/dockerize project
- description: Use APIs like Finnhub to fetch news articles related to stocks.
  labels:
  - High Priority
  - API Integration
  - Sentiment Analysis
  milestone: Sentiment Analysis
  milestone_description: null
  milestone_due_on: null
  prefix: '[High Priority]'
  title: '[FEATURE] Integrate news APIs for sentiment analysis'
- description: Write unit tests for all existing CRUD, API integration, and analysis
    operations.
  labels:
  - Backend
  - High Priority
  - Integration Testing
  milestone: Testing
  milestone_description: null
  milestone_due_on: null
  prefix: '[Backend]'
  title: '[IMPROVEMENT] Expand unit tests to cover all CRUD, API, and analysis operations'
- description: Configure Dev Containers for VS Code to ease developer onboarding.
  labels:
  - Medium Priority
  - Containerization
  - VS Code
  milestone: Development Environment Setup
  milestone_description: null
  milestone_due_on: null
  prefix: '[Medium Priority]'
  title: '[IMPROVEMENT] Ensure the project can run in a Dev Container for ease of
    development'
- description: Implement Docker for creating isolated, reproducible environments.
  labels:
  - High Priority
  - Docker
  - Containerization
  milestone: Containerization
  milestone_description: null
  milestone_due_on: null
  prefix: '[High Priority]'
  title: '[IMPROVEMENT] Containerize the project using Docker for reproducible development
    environments'
- description: Configure automated testing to run on every push or pull request.
  labels:
  - High Priority
  - Automation
  - Integration Testing
  - CI/CD
  milestone: CI/CD Setup
  milestone_description: null
  milestone_due_on: null
  prefix: '[High Priority]'
  title: '[FEATURE] Run tests automatically on each commit or pull request'
- description: ' Configure GitHub Actions to automate testing and building pipelines.'
  labels:
  - High Priority
  - Automation
  - CI/CD
  milestone: null
  milestone_description: ''
  milestone_due_on: null
  prefix: '[High Priority]'
  title: '[IMPROVEMENT] Set up GitHub Actions to automate tests, builds, and deployments'
- description: ' Write integration tests that simulate API failures, database updates,
    and performance bottlenecks.'
  labels:
  - Backend
  - High Priority
  - Integration Testing
  milestone: Testing
  milestone_description: null
  milestone_due_on: null
  prefix: '[Backend]'
  title: '[IMPROVEMENT] Implement integration tests simulating real-world data flow
    and failures'
- description: ' Implement a scheduler to send automated reports on stock analysis
    via email or Slack.'
  labels:
  - Medium Priority
  - Automation
  - Reporting
  milestone: Reporting Automation
  milestone_description: null
  milestone_due_on: null
  prefix: '[Medium Priority]'
  title: '[FEATURE] Generate daily or weekly automated reports with financial and
    sentiment analysis'
- description: ' Add robust retry logic for API failures and log errors for debugging.'
  labels:
  - Backend
  - Medium Priority
  - Error Handling
  milestone: Performance Optimization
  milestone_description: null
  milestone_due_on: null
  prefix: '[Backend]'
  title: '[IMPROVEMENT] Improve error handling and retries for failed API calls'
- description: Use async functionality to improve API call efficiency for fetching
    stock and news data.
  labels:
  - Backend
  - Medium Priority
  - Async
  - Performance
  milestone: Performance Optimization
  milestone_description: null
  milestone_due_on: null
  prefix: '[Backend]'
  title: '[FEATURE] Implement asynchronous data fetching for stock prices and news'
- description: Expand the CLI with commands to manage stocks, run fundamental and
    sentiment analysis.
  labels:
  - Medium Priority
  - CLI
  - Feature
  milestone: CLI Enhancements
  milestone_description: null
  milestone_due_on: null
  prefix: '[Medium Priority]'
  title: '[IMPROVEMENT] Add commands for adding/removing stocks, generating reports,
    and running analysis'
- description: Implement Natural Language Processing (NLP) models for sentiment extraction.
  labels:
  - Medium Priority
  - Sentiment Analysis
  - NLP
  milestone: Sentiment Analysis
  milestone_description: null
  milestone_due_on: null
  prefix: '[Medium Priority]'
  title: '[FEATURE] Apply NLP to extract sentiment from news articles'
- description: ' Store and calculate key financial metrics like P/E ratio, debt-to-equity,
    etc.'
  labels:
  - Backend
  - Medium Priority
  - Fundamental Analysis
  milestone: Fundamental Analysis
  milestone_description: null
  milestone_due_on: null
  prefix: '[Backend]'
  title: '[FEATURE] Store and analyze fundamental metrics (P/E ratio, debt, etc.)'
- description: ' Automatically pull fundamental financial reports from third-party
    APIs.'
  labels:
  - Backend
  - High Priority
  - API Integration
  milestone: Fundamental Analysis
  milestone_description: null
  milestone_due_on: null
  prefix: '[Backend]'
  title: '[FEATURE] Automate financial reports fetching from APIs (Alpha Vantage,
    Yahoo Finance)'
- description: Add appropriate indexes to the most accessed fields to improve query
    performance.
  labels:
  - Backend
  - Database
  - Medium Priority
  - Optimization
  milestone: Database Setup
  milestone_description: null
  milestone_due_on: null
  prefix: '[Backend]'
  title: '[FEATURE] Optimize DB queries with indexing for better performance'
- description: Add create, read, update, delete functionality for stock data.
  labels:
  - Backend
  - Database
  - Medium Priority
  milestone: Database Setup
  milestone_description: null
  milestone_due_on: null
  prefix: '[Backend]'
  title: '[FEATURE] Implement CRUD operations for stock data management'
- description: 'Description: Create a well-structured, normalized schema for stock,
    fundamental, and sentiment data.'
  labels:
  - Backend
  - Database
  - High Priority
  milestone: Database Setup
  milestone_description: null
  milestone_due_on: null
  prefix: '[Backend]'
  title: '[FEATURE] Design and normalize the database schema for stock and analysis
    data'
- description: 'Bumps ghcr.io/devcontainers/features/docker-in-docker from 1.0.9 to
    2.12.0.



    [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ghcr.io/devcontainers/features/docker-in-docker&package-manager=devcontainers&previous-version=1.0.9&new-version=2.12.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)


    Dependabot will resolve any conflicts with this PR as long as you don''t alter
    it yourself. You can also trigger a rebase manually by commenting `@dependabot
    rebase`.


    [//]: # (dependabot-automerge-start)

    [//]: # (dependabot-automerge-end)


    ---


    <details>

    <summary>Dependabot commands and options</summary>

    <br />


    You can trigger Dependabot actions by commenting on this PR:

    - `@dependabot rebase` will rebase this PR

    - `@dependabot recreate` will recreate this PR, overwriting any edits that have
    been made to it

    - `@dependabot merge` will merge this PR after your CI passes on it

    - `@dependabot squash and merge` will squash and merge this PR after your CI passes
    on it

    - `@dependabot cancel merge` will cancel a previously requested merge and block
    automerging

    - `@dependabot reopen` will reopen this PR if it is closed

    - `@dependabot close` will close this PR and stop Dependabot recreating it. You
    can achieve the same result by closing it manually

    - `@dependabot show <dependency name> ignore conditions` will show all of the
    ignore conditions of the specified dependency

    - `@dependabot ignore this major version` will close this PR and stop Dependabot
    creating any more for this major version (unless you reopen the PR or upgrade
    to it yourself)

    - `@dependabot ignore this minor version` will close this PR and stop Dependabot
    creating any more for this minor version (unless you reopen the PR or upgrade
    to it yourself)

    - `@dependabot ignore this dependency` will close this PR and stop Dependabot
    creating any more for this dependency (unless you reopen the PR or upgrade to
    it yourself)



    </details>'
  labels:
  - dependencies
  milestone: null
  milestone_description: ''
  milestone_due_on: null
  prefix: '[dependencies]'
  title: 'build(deps): bump ghcr.io/devcontainers/features/docker-in-docker from 1.0.9
    to 2.12.0'
- description: ''
  labels: []
  milestone: null
  milestone_description: ''
  milestone_due_on: null
  prefix: ''
  title: Changes container
